{"version":3,"sources":["hooks/useProfileFetch.ts","components/StarWarsProfile/index.tsx","components/MovieProfilePage/index.tsx"],"names":["useProfileFetch","name","slice","useSelector","state","dispatch","useDispatch","fetchProfileMemo","useMemo","api","actions","beginFetch","fetchSuccess","fetchError","fetch","then","response","json","data","catch","error","fetchProfile","StarWarsProfile","fields","title","isLoading","severity","variant","component","sx","marginBottom","marginTop","map","field","id","label","value","disabled","FIELDS","MovieProfilePage","movieId","useParams","useEffect"],"mappings":"gIAAA,mBA+BeA,IARS,SAACC,GACvB,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAuBA,EAAMH,MACjDI,EAAWC,cACXC,EAAmBC,mBAAQ,kBAZjC,SAACH,GAAD,OAAwB,SAACI,EAAaC,GACpC,IAAQC,EAAyCD,EAAzCC,WAAYC,EAA6BF,EAA7BE,aAAcC,EAAeH,EAAfG,WAClCR,EAASM,KACTG,MAAML,GACHM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUb,EAASO,EAAaM,OACrCC,OAAM,SAACC,GAAD,OAAWf,EAASQ,EAAWO,QAMHC,CAAahB,KAAW,CAACA,IAEhE,MAAO,CAACH,EAAOK,K,iCC5BjB,mDAoEee,IA5Cf,YAM0B,IALxBC,EAKuB,EALvBA,OACAC,EAIuB,EAJvBA,MACAC,EAGuB,EAHvBA,UACAL,EAEuB,EAFvBA,MACAF,EACuB,EADvBA,KAEA,OAAIO,EACK,cAAC,IAAD,CAAQxB,KAAK,YAGlBmB,EAEA,cAAC,IAAD,CAAOM,SAAS,QAAhB,qFAOF,gCACE,cAAC,IAAD,CACEC,QAAQ,KACRC,UAAU,MACVC,GAAI,CAAEC,aAAc,EAAGC,UAAW,GAHpC,SAKGP,IAEFD,EAAOS,KAAI,SAACC,GAAD,OACV,8BACE,cAAC,IAAD,CACEC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbC,MAAOlB,EAAKe,EAAMC,KAAO,GACzBL,GAAI,CAAEC,aAAc,EAAGC,UAAW,GAClCJ,QAAQ,WACRU,UAAQ,KAPFJ,EAAMC,Y,mGC3ClBI,EAAS,CACb,CACEJ,GAAI,WACJC,MAAO,YAET,CACED,GAAI,WACJC,MAAO,YAET,CACED,GAAI,eACJC,MAAO,iBAkCII,UA9Bf,WACE,IAAMC,EAAYC,cAAZD,QAEN,EAAmDxC,YACjD,uBADF,0BAASyB,EAAT,EAASA,UAAWL,EAApB,EAAoBA,MAAOF,EAA3B,EAA2BA,KAAQG,EAAnC,KAcA,OAVAqB,qBAAU,WACJrB,GAAgBmB,GAClBnB,EAAa,+BAAD,OAAgCmB,GAAW,CACrD7B,eACAC,iBACAC,mBAGH,CAACQ,EAAcmB,IAGhB,8BACE,cAAC,IAAD,CACEjB,OAAQe,EACRb,UAAWA,EACXL,MAAOA,EACPF,KAAMA,EACNM,MAAON,EAAKM","file":"static/js/9.3e3f40fb.chunk.js","sourcesContent":["import { useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\ninterface StateModel {\n  [key: string]: any;\n}\n\ninterface ActionModel {\n  beginFetch: Function;\n  fetchSuccess: Function;\n  fetchError: Function;\n}\n\nconst fetchProfile =\n  (dispatch: Function) => (api: string, actions: ActionModel) => {\n    const { beginFetch, fetchSuccess, fetchError } = actions;\n    dispatch(beginFetch());\n    fetch(api)\n      .then((response) => response.json())\n      .then((data) => dispatch(fetchSuccess(data)))\n      .catch((error) => dispatch(fetchError(error)));\n  };\n\nconst useProfileFetch = (name: string) => {\n  const slice = useSelector((state: StateModel) => state[name]);\n  const dispatch = useDispatch();\n  const fetchProfileMemo = useMemo(() => fetchProfile(dispatch), [dispatch]);\n\n  return [slice, fetchProfileMemo];\n};\n\nexport default useProfileFetch;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\nimport Alert from \"@mui/material/Alert\";\nimport Loader from \"../Loader\";\n\ninterface Profile {\n  [key: string]: string;\n  id: string;\n}\n\ninterface Field {\n  id: string;\n  label: string;\n}\n\ninterface StarWarsProfileModel {\n  fields: Array<Field>;\n  title: string;\n  isLoading: boolean;\n  error: any;\n  data: Profile;\n}\n\nfunction StarWarsProfile({\n  fields,\n  title,\n  isLoading,\n  error,\n  data,\n}: StarWarsProfileModel) {\n  if (isLoading) {\n    return <Loader name=\"profile\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\">\n        An error occurred while retrieving the profile. Please try again later.\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      <Typography\n        variant=\"h6\"\n        component=\"div\"\n        sx={{ marginBottom: 1, marginTop: 1 }}\n      >\n        {title}\n      </Typography>\n      {fields.map((field) => (\n        <div key={field.id}>\n          <TextField\n            id={field.id}\n            label={field.label}\n            value={data[field.id] || \"\"}\n            sx={{ marginBottom: 1, marginTop: 1 }}\n            variant=\"standard\"\n            disabled\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default StarWarsProfile;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useProfileFetch from \"../../hooks/useProfileFetch\";\nimport {\n  beginFetch,\n  fetchSuccess,\n  fetchError,\n} from \"../../reducers/fetchMovieProfileSlice\";\nimport StarWarsProfile from \"../StarWarsProfile\";\n\nconst FIELDS = [\n  {\n    id: \"director\",\n    label: \"Director\",\n  },\n  {\n    id: \"producer\",\n    label: \"Producer\",\n  },\n  {\n    id: \"release_date\",\n    label: \"Release Date\",\n  },\n];\n\nfunction MovieProfilePage() {\n  let { movieId } = useParams();\n\n  const [{ isLoading, error, data }, fetchProfile] = useProfileFetch(\n    \"movieProfileReducer\"\n  );\n\n  useEffect(() => {\n    if (fetchProfile && movieId) {\n      fetchProfile(`https://swapi.dev/api/films/${movieId}`, {\n        beginFetch,\n        fetchSuccess,\n        fetchError,\n      });\n    }\n  }, [fetchProfile, movieId]);\n\n  return (\n    <div>\n      <StarWarsProfile\n        fields={FIELDS}\n        isLoading={isLoading}\n        error={error}\n        data={data}\n        title={data.title}\n      />\n    </div>\n  );\n}\n\nexport default MovieProfilePage;\n"],"sourceRoot":""}